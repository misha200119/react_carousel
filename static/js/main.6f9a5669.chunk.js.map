{"version":3,"sources":["components/Carousel/Carousel.tsx","components/InputForm/InputForm.tsx","App.tsx","index.tsx"],"names":["Carousel","state","shiftX","currentPosition","scrollRight","images","props","caruselSettings","frameSize","stepCount","isInfinite","animationDuration","itemWidth","currentIndex","step","length","totalFrames","minShift","animationScrollID","setInterval","setState","setTimeout","clearInterval","newIndex","scrollLeft","this","outerImages","end","i","index","push","defaultPosition","currentImages","getSmilesToRender","className","style","width","transition","transform","map","imageUrl","src","alt","height","type","onClick","disabled","React","Component","InputForm","updateSettings","method","htmlFor","id","name","min","max","defaultValue","required","onChange","checked","App","e","currentTarget","value","prevState","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f9a5669.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\nimport { CaruselSettings } from '../../types/CaruselSettings';\n\ntype Props = {\n  images: string[],\n  caruselSettings: CaruselSettings,\n};\n\ntype State = {\n  shiftX: number,\n  currentPosition: number,\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    shiftX: 0,\n    currentPosition: 0,\n  };\n\n  getSmilesToRender(): Array<string> {\n    const {\n      frameSize,\n      stepCount,\n    } = this.props.caruselSettings;\n\n    const { images } = this.props;\n\n    const { currentPosition } = this.state;\n\n    const outerImages: Array<string> = [];\n\n    const start = currentPosition - stepCount;\n    const end = currentPosition + stepCount + frameSize;\n\n    for (let i = start; i < end; i += 1) {\n      let index = i;\n\n      if (i < 0) {\n        index = (i + 1) + (images.length - 1);\n      } else {\n        index %= images.length;\n      }\n\n      outerImages.push(images[index]);\n    }\n\n    return outerImages;\n  }\n\n  scrollRight = () => {\n    const {\n      images,\n    } = this.props;\n\n    const {\n      frameSize,\n      stepCount,\n      isInfinite,\n      animationDuration,\n      itemWidth,\n    } = this.props.caruselSettings;\n\n    const { currentPosition: currentIndex } = this.state;\n\n    let step = stepCount;\n\n    if (!isInfinite) {\n      step = (currentIndex + stepCount < images.length - frameSize)\n        ? stepCount\n        : images.length - frameSize - currentIndex;\n    }\n\n    const frames = 144;\n    const animationInSeconds = animationDuration / 1000;\n    const totalFrames = animationInSeconds * frames;\n\n    const minShift = this.state.shiftX - itemWidth * step;\n\n    const animationScrollID = setInterval(() => {\n      this.setState(({ shiftX }) => (\n        {\n          shiftX: ((shiftX > minShift)\n            ? shiftX - (itemWidth * step) / totalFrames\n            : minShift),\n        }\n      ));\n    }, animationDuration / totalFrames);\n\n    setTimeout(() => {\n      clearInterval(animationScrollID);\n\n      this.setState(({ currentPosition }) => {\n        let newIndex = currentPosition + step;\n\n        if (isInfinite) {\n          newIndex = (newIndex < images.length)\n            ? newIndex\n            : newIndex % images.length;\n        } else {\n          newIndex = (newIndex < images.length)\n            ? newIndex\n            : images.length - 1;\n        }\n\n        return {\n          shiftX: 0,\n          currentPosition: newIndex,\n        };\n      });\n    }, animationDuration);\n  };\n\n  scrollLeft = () => {\n    const {\n      images,\n    } = this.props;\n\n    const {\n      stepCount,\n      isInfinite,\n      animationDuration,\n      itemWidth,\n    } = this.props.caruselSettings;\n\n    const { currentPosition: currentIndex } = this.state;\n\n    let step = stepCount;\n\n    if (!isInfinite) {\n      step = (currentIndex - stepCount < 0)\n        ? currentIndex\n        : stepCount;\n    }\n\n    const frames = 144;\n    const animationInSeconds = animationDuration / 1000;\n    const totalFrames = animationInSeconds * frames;\n\n    const minShift = this.state.shiftX + itemWidth * step;\n\n    const animationScrollID = setInterval(() => {\n      this.setState(({ shiftX }) => (\n        {\n          shiftX: ((shiftX < minShift)\n            ? shiftX + (itemWidth * step) / totalFrames\n            : minShift),\n        }\n      ));\n    }, animationDuration / totalFrames);\n\n    setTimeout(() => {\n      clearInterval(animationScrollID);\n\n      this.setState(({ currentPosition }) => {\n        let newIndex = currentPosition - step;\n\n        if (isInfinite) {\n          newIndex = (newIndex > -1)\n            ? newIndex\n            : images.length - 1 + ((newIndex + 1) % images.length);\n        } else {\n          newIndex = (newIndex > -1)\n            ? newIndex\n            : 0;\n        }\n\n        return {\n          shiftX: 0,\n          currentPosition: newIndex,\n        };\n      });\n    }, animationDuration);\n  };\n\n  render() {\n    const { shiftX, currentPosition } = this.state;\n\n    const {\n      caruselSettings,\n      images,\n    } = this.props;\n\n    const {\n      itemWidth,\n      frameSize,\n      animationDuration,\n      stepCount,\n      isInfinite,\n    } = caruselSettings;\n\n    const defaultPosition = -itemWidth * stepCount;\n\n    const currentImages = this.getSmilesToRender();\n\n    return (\n      <div\n        className=\"carousel\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        <ul\n          className=\"carousel__list\"\n          style={{\n            width: `${itemWidth * currentImages.length}px`,\n            transition: `translateX ${animationDuration}ms`,\n            transform: `translateX(${defaultPosition + shiftX}px)`,\n          }}\n        >\n          {currentImages.map((imageUrl, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <li className=\"carousel__list-item\" key={index}>\n              <img\n                src={imageUrl}\n                alt=\"SmileImage\"\n                style={{\n                  width: `${itemWidth}px`,\n                  height: `${itemWidth}px`,\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n        <div className=\"carousel__buttons\">\n          <button\n            type=\"button\"\n            onClick={this.scrollLeft}\n            disabled={\n              (!isInfinite && currentPosition - stepCount < 0)\n            }\n          >\n            previous\n          </button>\n          <button\n            type=\"button\"\n            onClick={this.scrollRight}\n            disabled={\n              (!isInfinite && currentPosition + stepCount > images.length)\n            }\n          >\n            next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","/* eslint-disable react/state-in-constructor */\nimport React from 'react';\nimport { CaruselSettings } from '../../types/CaruselSettings';\n\nimport './InputForm.scss';\n\ntype Props = {\n  images: Array<string>\n  caruselSettings: CaruselSettings,\n  updateSettings: (event: React.FormEvent<HTMLInputElement>) => void,\n};\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class InputForm extends React.Component<Props> {\n  render() {\n    const {\n      itemWidth,\n      frameSize,\n      stepCount,\n      animationDuration,\n      isInfinite,\n    } = this.props.caruselSettings;\n    const {\n      images,\n      updateSettings,\n    } = this.props;\n\n    return (\n      <form\n        className=\"inputForm\"\n        method=\"get\"\n      >\n        <label className=\"inputForm__label\" htmlFor=\"width\">\n          ItemWidth (px):\n        </label>\n        <input\n          id=\"width\"\n          name=\"itemWidth\"\n          type=\"number\"\n          min=\"50\"\n          max=\"200\"\n          step=\"10\"\n          defaultValue={itemWidth}\n          required\n          className=\"inputForm__input\"\n          onChange={updateSettings}\n        />\n        <label className=\"inputForm__label\" htmlFor=\"frameSize\">\n          FrameSize (count):\n        </label>\n        <input\n          id=\"frameSize\"\n          name=\"frameSize\"\n          min=\"1\"\n          step=\"1\"\n          max={images.length}\n          type=\"number\"\n          defaultValue={frameSize}\n          required\n          className=\"inputForm__input\"\n          onChange={updateSettings}\n        />\n        <label className=\"inputForm__label\" htmlFor=\"stepCount\">\n          Step (count):\n        </label>\n        <input\n          id=\"stepCount\"\n          name=\"stepCount\"\n          min=\"1\"\n          max={images.length}\n          step=\"1\"\n          type=\"number\"\n          defaultValue={stepCount}\n          required\n          className=\"inputForm__input\"\n          onChange={updateSettings}\n        />\n        <label className=\"inputForm__label\" htmlFor=\"animationDuration\">\n          animationDuration (ms):\n        </label>\n        <input\n          id=\"animationDuration\"\n          name=\"animationDuration\"\n          min=\"0\"\n          step=\"100\"\n          type=\"number\"\n          defaultValue={animationDuration}\n          required\n          className=\"inputForm__input\"\n          onChange={updateSettings}\n        />\n        <label className=\"inputForm__label\" htmlFor=\"isInfinite\">\n          isInfinite (y/n):\n        </label>\n        <input\n          id=\"isInfinite\"\n          name=\"isInfinite\"\n          type=\"checkbox\"\n          checked={isInfinite}\n          className=\"inputForm__input\"\n          onChange={updateSettings}\n        />\n      </form>\n    );\n  }\n}\n","/* eslint-disable import/no-useless-path-segments */\nimport React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel/';\nimport { InputForm } from './components/InputForm/';\nimport { CaruselSettings } from './types/CaruselSettings';\n\ntype State = {\n  images: Array<string>,\n  caruselSettings: CaruselSettings,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    caruselSettings: {\n      frameSize: 3,\n      itemWidth: 100,\n      stepCount: 3,\n      animationDuration: 1000,\n      isInfinite: false,\n    },\n  };\n\n  updateSettings: (event: React.FormEvent<HTMLInputElement>) => void = (e) => {\n    const { name, value } = e.currentTarget;\n\n    // eslint-disable-next-line default-case\n    switch (name) {\n      case 'itemWidth':\n        this.setState((prevState) => (\n          {\n            ...prevState,\n            caruselSettings: {\n              ...prevState.caruselSettings,\n              itemWidth: Number(value),\n            },\n          }\n        ));\n        break;\n      case 'frameSize':\n        this.setState((prevState) => (\n          {\n            ...prevState,\n            caruselSettings: {\n              ...prevState.caruselSettings,\n              frameSize: Number(value),\n            },\n          }\n        ));\n        break;\n      case 'stepCount':\n        this.setState((prevState) => (\n          {\n            ...prevState,\n            caruselSettings: {\n              ...prevState.caruselSettings,\n              stepCount: Number(value),\n            },\n          }\n        ));\n        break;\n      case 'animationDuration':\n        this.setState((prevState) => (\n          {\n            ...prevState,\n            caruselSettings: {\n              ...prevState.caruselSettings,\n              animationDuration: Number(value),\n            },\n          }\n        ));\n        break;\n      case 'isInfinite':\n        this.setState((prevState) => (\n          {\n            ...prevState,\n            caruselSettings: {\n              ...prevState.caruselSettings,\n              isInfinite: !prevState.caruselSettings.isInfinite,\n            },\n          }\n        ));\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      caruselSettings,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <InputForm\n          images={images}\n          caruselSettings={caruselSettings}\n          updateSettings={this.updateSettings}\n        />\n\n        <Carousel\n          images={images}\n          caruselSettings={caruselSettings}\n        />\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}